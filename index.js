// Generated by CoffeeScript 1.10.0
(function() {
  "use strict";
  var Phaser, SpriteGUI,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Phaser = this.Phaser;

  this.SpriteGUI = Object.freeze(SpriteGUI = (function(superClass) {
    var addAnchor, addBody, addPoint, addScale;

    extend(SpriteGUI, superClass);

    SpriteGUI.addAnchor = addAnchor = function(cn, anchor) {
      addPoint(cn, anchor, 0, 1);
    };

    SpriteGUI.addBody = addBody = function(cn, body) {
      cn.add(body, "allowGravity");
      cn.add(body, "allowRotation");
      cn.add(body, "angularAcceleration", -3600, 3600).listen();
      cn.add(body, "angularDrag", 0, 3600).listen();
      cn.add(body, "angularVelocity", -body.maxAngular, body.maxAngular).listen();
      cn.add(body, "collideWorldBounds").listen();
      addPoint(cn.addFolder("drag"), body.drag, 0, 1000);
      cn.add(body, "enable").listen();
      addPoint(cn.addFolder("friction"), body.friction, 0, 1);
      addPoint(cn.addFolder("gravity"), body.gravity, -1000, 1000);
      cn.add(body, "immovable").listen();
      cn.add(body, "mass", 0, 100).listen();
      cn.add(body, "maxAngular", 0, 3600).listen();
      addPoint(cn.addFolder("maxVelocity"), body.maxVelocity, 0, 1000);
      cn.add(body, "moves").listen();
      addPoint(cn.addFolder("offset"), body.offset);
      cn.add(body, "rotation", -180, 180).step(5).listen();
      cn.add(body, "skipQuadTree").listen();
      cn.add(body, "syncBounds").listen();
      addPoint(cn.addFolder("velocity"), body.velocity, -1000, 1000);
    };

    SpriteGUI.addPoint = addPoint = function(cn, point, min, max) {
      cn.add(point, "x").min(min).max(max).listen();
      cn.add(point, "y").min(min).max(max).listen();
    };

    SpriteGUI.addScale = addScale = function(cn, scale, min, max) {
      addPoint(cn, scale, min, max);
    };

    function SpriteGUI(sprite1, params) {
      this.sprite = sprite1;
      if (params == null) {
        params = {};
      }
      SpriteGUI.__super__.constructor.call(this, params);
      this.addAll();
    }

    SpriteGUI.prototype.addAll = function() {
      var sprite, world;
      sprite = this.sprite;
      world = sprite.game.world;
      this.add(sprite, "alive").listen();
      this.add(sprite, "alpha", 0, 1).listen();
      this.add(sprite, "autoCull").listen();
      this.addAnchor();
      this.add(sprite, "blendMode", Phaser.blendModes).listen();
      this.add(sprite, "bringToTop");
      this.addBody();
      this.add(sprite, "cacheAsBitmap").listen();
      this.add(sprite, "checkWorldBounds").listen();
      this.add(sprite, "debug").listen();
      this.add(sprite, "exists").listen();
      this.add(sprite, "fixedToCamera").listen();
      this.add(sprite, "frame", sprite.animations.frameData.getFrameIndexes()).listen();
      this.add(sprite, "frameName").listen();
      this.add(sprite, "health", 0, sprite.maxHealth).listen();
      this.add(sprite, "key").listen();
      this.add(sprite, "kill");
      this.add(sprite, "lifespan", 0).listen();
      this.add(sprite, "moveDown");
      this.add(sprite, "moveUp");
      this.add(sprite, "name").listen();
      this.add(sprite, "outOfBoundsKill").listen();
      this.add(sprite, "outOfCameraBoundsKill").listen();
      this.add(sprite, "renderable").listen();
      this.add(sprite, "reset");
      this.add(sprite, "revive");
      this.add(sprite, "rotation", -Math.PI, Math.PI).listen();
      this.add(sprite, "sendToBack");
      this.addScale();
      this.add(sprite, "smoothed").listen();
      this.add(sprite, "tint").listen();
      this.add(sprite, "visible").listen();
      this.add(sprite, "x", world.left, world.right).listen();
      this.add(sprite, "y", world.top, world.bottom).listen();
      this.add(sprite, "z").listen();
    };

    SpriteGUI.prototype.addAnchor = function() {
      var anchor, folder;
      anchor = this.sprite.anchor;
      folder = this.addFolder("anchor");
      folder.add(anchor, "x", 0, 1).listen();
      folder.add(anchor, "y", 0, 1).listen();
      return folder;
    };

    SpriteGUI.prototype.addBody = function() {
      var folder;
      folder = this.addFolder("body");
      addBody(folder, this.sprite.body);
      return folder;
    };

    SpriteGUI.prototype.addScale = function() {
      var folder;
      folder = this.addFolder("scale");
      addScale(folder, this.sprite.scale, this.sprite.scaleMin || -4, this.sprite.scaleMax || 4);
      return folder;
    };

    return SpriteGUI;

  })(dat.GUI));

}).call(this);
