// Generated by CoffeeScript 1.10.0
(function() {
  "use strict";
  var DEFAULT_IMAGE, IMAGE, SPRITESHEET, expect;

  expect = chai.expect;

  DEFAULT_IMAGE = "__default";

  IMAGE = {
    key: "../example/assets/droid.png"
  };

  SPRITESHEET = {
    key: "../example/assets/dude.png",
    width: 32,
    height: 48
  };

  describe("hooks", function() {
    var game;
    game = null;
    before("new game", function(done) {
      game = new Phaser.Game(100, 100, Phaser.HEADLESS);
      game.state.add("boot", {
        init: function() {
          game.raf.stop();
          Phaser.Canvas.removeFromDOM(game.canvas);
          return done();
        },
        create: function() {
          return console.log("boot.create");
        }
      });
      return game.state.start("boot");
    });
    after("destroy game", function() {
      return game.destroy();
    });
    afterEach("clear state", function() {
      return game.state.clearCurrentState();
    });
    describe("window", function() {
      it("has dat", function() {
        return expect(window).to.have.property("dat").that.is.an.object;
      });
      it("has Phaser", function() {
        return expect(window).to.have.property("Phaser").that.is.an.object;
      });
      return it("has SpriteGUI", function() {
        return expect(window).to.have.property("SpriteGUI").that.is.a["function"];
      });
    });
    describe("Phaser", function() {
      return it("is version 2.6.2", function() {
        return expect(Phaser).to.have.property("VERSION").that.equals("2.6.2");
      });
    });
    describe("a Sprite", function() {
      it("s key is '__default'", function() {
        var sprite;
        sprite = game.add.sprite(0, 0, DEFAULT_IMAGE);
        return expect(sprite).to.have.property("key").that.equals("__default");
      });
      it("has a valid texture", function() {
        var sprite;
        sprite = game.add.sprite(0, 0, DEFAULT_IMAGE);
        return expect(sprite.texture).to.have.property("valid").that.is["true"];
      });
      it("has a frame", function() {
        var sprite;
        sprite = game.add.sprite(0, 0, DEFAULT_IMAGE);
        return expect(sprite).to.have.property("frame").that.equals(0);
      });
      it("has no frameName", function() {
        var sprite;
        sprite = game.add.sprite(0, 0, DEFAULT_IMAGE);
        return expect(sprite).to.have.property("frameName").that.is["null"];
      });
      it("has an Animation Manager", function() {
        var sprite;
        sprite = game.add.sprite(0, 0, DEFAULT_IMAGE);
        return expect(sprite).to.have.property("animations").that.is.an.instanceOf(Phaser.AnimationManager);
      });
      return describe("sprite.animations", function() {
        it("is loaded", function() {
          var sprite;
          sprite = game.add.sprite(0, 0, DEFAULT_IMAGE);
          return expect(sprite.animations).to.have.property("isLoaded").that.is["true"];
        });
        it("has a frameTotal", function() {
          var sprite;
          sprite = game.add.sprite(0, 0, DEFAULT_IMAGE);
          return expect(sprite.animations).to.have.property("frameTotal").that.equals(1);
        });
        return it("has frame indexes", function() {
          var sprite;
          sprite = game.add.sprite(0, 0, DEFAULT_IMAGE);
          return expect(sprite.animations.frameData.getFrameIndexes()).to.be.an("array")["with"].lengthOf(1);
        });
      });
    });
    return describe("SpriteGUI", function() {
      it("is a function", function() {
        return expect(SpriteGUI).to.be.a["function"];
      });
      return describe("new SpriteGUI", function() {
        it("returns a SpriteGUI instance", function() {
          var gui, sprite;
          sprite = game.add.sprite(0, 0, DEFAULT_IMAGE);
          gui = new SpriteGUI(sprite);
          expect(gui).to.be.an.instanceOf(SpriteGUI);
          return gui.destroy();
        });
        it("accepts a multi-frame Sprite");
        it("accepts a physics-enabled Sprite", function() {
          var gui, sprite;
          sprite = game.add.sprite(0, 0, DEFAULT_IMAGE);
          game.physics.enable(sprite);
          expect(sprite.body).to.be.an.instanceOf(Phaser.Physics.Arcade.Body);
          gui = new SpriteGUI(sprite);
          expect(gui).to.be.an.instanceOf(SpriteGUI);
          return gui.destroy();
        });
        it("accepts an input-enabled Sprite", function() {
          var gui, sprite;
          sprite = game.add.sprite(0, 0, DEFAULT_IMAGE);
          sprite.inputEnabled = true;
          expect(sprite.input).to.be.an.instanceOf(Phaser.InputHandler);
          gui = new SpriteGUI(sprite);
          expect(gui).to.be.an.instanceOf(SpriteGUI);
          return gui.destroy();
        });
        it("might accept an Image", function() {
          var gui, img;
          img = game.add.image(0, 0, DEFAULT_IMAGE);
          gui = new SpriteGUI(img);
          expect(gui).to.be.an.instanceOf(SpriteGUI);
          return gui.destroy();
        });
        it("might accept a TileSprite", function() {
          var gui, tileSprite;
          tileSprite = game.add.tileSprite(0, 0, 100, 100, DEFAULT_IMAGE);
          gui = new SpriteGUI(tileSprite);
          expect(gui).to.be.an.instanceOf(SpriteGUI);
          return gui.destroy();
        });
        describe("autoPlace", function() {
          it("sets gui.autoPlace", function() {
            var gui, sprite;
            sprite = game.add.sprite(0, 0, DEFAULT_IMAGE);
            gui = new SpriteGUI(sprite, {
              autoPlace: true
            });
            expect(gui).to.have.property("autoPlace").that.is["true"];
            return gui.destroy();
          });
          return it("sets gui.scrollable", function() {
            var gui, sprite;
            sprite = game.add.sprite(0, 0, DEFAULT_IMAGE);
            gui = new SpriteGUI(sprite, {
              autoPlace: true
            });
            expect(gui).to.have.property("scrollable").that.is["true"];
            return gui.destroy();
          });
        });
        describe("autoPlace=false", function() {
          it("sets gui.autoPlace", function() {
            var gui, sprite;
            sprite = game.add.sprite(0, 0, DEFAULT_IMAGE);
            gui = new SpriteGUI(sprite, {
              autoPlace: false
            });
            expect(gui).to.have.property("autoPlace").that.is["false"];
            return gui.destroy();
          });
          return it("doesn't set gui.scrollable", function() {
            var gui, sprite;
            sprite = game.add.sprite(0, 0, DEFAULT_IMAGE);
            gui = new SpriteGUI(sprite, {
              autoPlace: false
            });
            expect(gui).to.have.property("scrollable").that.is.undefined;
            return gui.destroy();
          });
        });
        describe("closeOnTop", function() {
          return it("sets gui.closeOnTop", function() {
            var gui, sprite;
            sprite = game.add.sprite(0, 0, DEFAULT_IMAGE);
            gui = new SpriteGUI(sprite, {
              closeOnTop: true
            });
            expect(gui).to.have.property("closeOnTop").that.is["true"];
            return gui.destroy();
          });
        });
        describe("width", function() {
          return it("sets gui.width", function() {
            var gui, sprite;
            sprite = game.add.sprite(0, 0, DEFAULT_IMAGE);
            gui = new SpriteGUI(sprite, {
              width: 320
            });
            expect(gui).to.have.property("width").that.is.within(320, 321);
            return gui.destroy();
          });
        });
        describe("include", function() {
          it("sets gui.include", function() {
            var gui, sprite;
            sprite = game.add.sprite(0, 0, DEFAULT_IMAGE);
            gui = new SpriteGUI(sprite, null, {
              include: ["key"]
            });
            expect(gui).to.have.property("include").that.deep.equals({
              key: true
            });
            return gui.destroy();
          });
          return it("uses filterInclude", function() {
            var gui, sprite;
            sprite = game.add.sprite(0, 0, DEFAULT_IMAGE);
            gui = new SpriteGUI(sprite, null, {
              include: ["key"]
            });
            expect(gui.filter).to.equal(SpriteGUI.prototype.filterInclude);
            return gui.destroy();
          });
        });
        return describe("exclude", function() {
          it("sets gui.exclude", function() {
            var gui, sprite;
            sprite = game.add.sprite(0, 0, DEFAULT_IMAGE);
            gui = new SpriteGUI(sprite, null, {
              exclude: ["key"]
            });
            expect(gui).to.have.property("exclude").that.deep.equals({
              key: true
            });
            return gui.destroy();
          });
          return it("uses filterExclude", function() {
            var gui, sprite;
            sprite = game.add.sprite(0, 0, DEFAULT_IMAGE);
            gui = new SpriteGUI(sprite, null, {
              exclude: ["key"]
            });
            expect(gui.filter).to.equal(SpriteGUI.prototype.filterExclude);
            return gui.destroy();
          });
        });
      });
    });
  });

}).call(this);
